use super::*;

pub(crate) const FIXED_HUFFMAN_TREE: LitLenAlphabet = LitLenAlphabet {
  tree: [
    TreeEntry { bit_pattern: 48, bit_count: 8 },
    TreeEntry { bit_pattern: 49, bit_count: 8 },
    TreeEntry { bit_pattern: 50, bit_count: 8 },
    TreeEntry { bit_pattern: 51, bit_count: 8 },
    TreeEntry { bit_pattern: 52, bit_count: 8 },
    TreeEntry { bit_pattern: 53, bit_count: 8 },
    TreeEntry { bit_pattern: 54, bit_count: 8 },
    TreeEntry { bit_pattern: 55, bit_count: 8 },
    TreeEntry { bit_pattern: 56, bit_count: 8 },
    TreeEntry { bit_pattern: 57, bit_count: 8 },
    TreeEntry { bit_pattern: 58, bit_count: 8 },
    TreeEntry { bit_pattern: 59, bit_count: 8 },
    TreeEntry { bit_pattern: 60, bit_count: 8 },
    TreeEntry { bit_pattern: 61, bit_count: 8 },
    TreeEntry { bit_pattern: 62, bit_count: 8 },
    TreeEntry { bit_pattern: 63, bit_count: 8 },
    TreeEntry { bit_pattern: 64, bit_count: 8 },
    TreeEntry { bit_pattern: 65, bit_count: 8 },
    TreeEntry { bit_pattern: 66, bit_count: 8 },
    TreeEntry { bit_pattern: 67, bit_count: 8 },
    TreeEntry { bit_pattern: 68, bit_count: 8 },
    TreeEntry { bit_pattern: 69, bit_count: 8 },
    TreeEntry { bit_pattern: 70, bit_count: 8 },
    TreeEntry { bit_pattern: 71, bit_count: 8 },
    TreeEntry { bit_pattern: 72, bit_count: 8 },
    TreeEntry { bit_pattern: 73, bit_count: 8 },
    TreeEntry { bit_pattern: 74, bit_count: 8 },
    TreeEntry { bit_pattern: 75, bit_count: 8 },
    TreeEntry { bit_pattern: 76, bit_count: 8 },
    TreeEntry { bit_pattern: 77, bit_count: 8 },
    TreeEntry { bit_pattern: 78, bit_count: 8 },
    TreeEntry { bit_pattern: 79, bit_count: 8 },
    TreeEntry { bit_pattern: 80, bit_count: 8 },
    TreeEntry { bit_pattern: 81, bit_count: 8 },
    TreeEntry { bit_pattern: 82, bit_count: 8 },
    TreeEntry { bit_pattern: 83, bit_count: 8 },
    TreeEntry { bit_pattern: 84, bit_count: 8 },
    TreeEntry { bit_pattern: 85, bit_count: 8 },
    TreeEntry { bit_pattern: 86, bit_count: 8 },
    TreeEntry { bit_pattern: 87, bit_count: 8 },
    TreeEntry { bit_pattern: 88, bit_count: 8 },
    TreeEntry { bit_pattern: 89, bit_count: 8 },
    TreeEntry { bit_pattern: 90, bit_count: 8 },
    TreeEntry { bit_pattern: 91, bit_count: 8 },
    TreeEntry { bit_pattern: 92, bit_count: 8 },
    TreeEntry { bit_pattern: 93, bit_count: 8 },
    TreeEntry { bit_pattern: 94, bit_count: 8 },
    TreeEntry { bit_pattern: 95, bit_count: 8 },
    TreeEntry { bit_pattern: 96, bit_count: 8 },
    TreeEntry { bit_pattern: 97, bit_count: 8 },
    TreeEntry { bit_pattern: 98, bit_count: 8 },
    TreeEntry { bit_pattern: 99, bit_count: 8 },
    TreeEntry { bit_pattern: 100, bit_count: 8 },
    TreeEntry { bit_pattern: 101, bit_count: 8 },
    TreeEntry { bit_pattern: 102, bit_count: 8 },
    TreeEntry { bit_pattern: 103, bit_count: 8 },
    TreeEntry { bit_pattern: 104, bit_count: 8 },
    TreeEntry { bit_pattern: 105, bit_count: 8 },
    TreeEntry { bit_pattern: 106, bit_count: 8 },
    TreeEntry { bit_pattern: 107, bit_count: 8 },
    TreeEntry { bit_pattern: 108, bit_count: 8 },
    TreeEntry { bit_pattern: 109, bit_count: 8 },
    TreeEntry { bit_pattern: 110, bit_count: 8 },
    TreeEntry { bit_pattern: 111, bit_count: 8 },
    TreeEntry { bit_pattern: 112, bit_count: 8 },
    TreeEntry { bit_pattern: 113, bit_count: 8 },
    TreeEntry { bit_pattern: 114, bit_count: 8 },
    TreeEntry { bit_pattern: 115, bit_count: 8 },
    TreeEntry { bit_pattern: 116, bit_count: 8 },
    TreeEntry { bit_pattern: 117, bit_count: 8 },
    TreeEntry { bit_pattern: 118, bit_count: 8 },
    TreeEntry { bit_pattern: 119, bit_count: 8 },
    TreeEntry { bit_pattern: 120, bit_count: 8 },
    TreeEntry { bit_pattern: 121, bit_count: 8 },
    TreeEntry { bit_pattern: 122, bit_count: 8 },
    TreeEntry { bit_pattern: 123, bit_count: 8 },
    TreeEntry { bit_pattern: 124, bit_count: 8 },
    TreeEntry { bit_pattern: 125, bit_count: 8 },
    TreeEntry { bit_pattern: 126, bit_count: 8 },
    TreeEntry { bit_pattern: 127, bit_count: 8 },
    TreeEntry { bit_pattern: 128, bit_count: 8 },
    TreeEntry { bit_pattern: 129, bit_count: 8 },
    TreeEntry { bit_pattern: 130, bit_count: 8 },
    TreeEntry { bit_pattern: 131, bit_count: 8 },
    TreeEntry { bit_pattern: 132, bit_count: 8 },
    TreeEntry { bit_pattern: 133, bit_count: 8 },
    TreeEntry { bit_pattern: 134, bit_count: 8 },
    TreeEntry { bit_pattern: 135, bit_count: 8 },
    TreeEntry { bit_pattern: 136, bit_count: 8 },
    TreeEntry { bit_pattern: 137, bit_count: 8 },
    TreeEntry { bit_pattern: 138, bit_count: 8 },
    TreeEntry { bit_pattern: 139, bit_count: 8 },
    TreeEntry { bit_pattern: 140, bit_count: 8 },
    TreeEntry { bit_pattern: 141, bit_count: 8 },
    TreeEntry { bit_pattern: 142, bit_count: 8 },
    TreeEntry { bit_pattern: 143, bit_count: 8 },
    TreeEntry { bit_pattern: 144, bit_count: 8 },
    TreeEntry { bit_pattern: 145, bit_count: 8 },
    TreeEntry { bit_pattern: 146, bit_count: 8 },
    TreeEntry { bit_pattern: 147, bit_count: 8 },
    TreeEntry { bit_pattern: 148, bit_count: 8 },
    TreeEntry { bit_pattern: 149, bit_count: 8 },
    TreeEntry { bit_pattern: 150, bit_count: 8 },
    TreeEntry { bit_pattern: 151, bit_count: 8 },
    TreeEntry { bit_pattern: 152, bit_count: 8 },
    TreeEntry { bit_pattern: 153, bit_count: 8 },
    TreeEntry { bit_pattern: 154, bit_count: 8 },
    TreeEntry { bit_pattern: 155, bit_count: 8 },
    TreeEntry { bit_pattern: 156, bit_count: 8 },
    TreeEntry { bit_pattern: 157, bit_count: 8 },
    TreeEntry { bit_pattern: 158, bit_count: 8 },
    TreeEntry { bit_pattern: 159, bit_count: 8 },
    TreeEntry { bit_pattern: 160, bit_count: 8 },
    TreeEntry { bit_pattern: 161, bit_count: 8 },
    TreeEntry { bit_pattern: 162, bit_count: 8 },
    TreeEntry { bit_pattern: 163, bit_count: 8 },
    TreeEntry { bit_pattern: 164, bit_count: 8 },
    TreeEntry { bit_pattern: 165, bit_count: 8 },
    TreeEntry { bit_pattern: 166, bit_count: 8 },
    TreeEntry { bit_pattern: 167, bit_count: 8 },
    TreeEntry { bit_pattern: 168, bit_count: 8 },
    TreeEntry { bit_pattern: 169, bit_count: 8 },
    TreeEntry { bit_pattern: 170, bit_count: 8 },
    TreeEntry { bit_pattern: 171, bit_count: 8 },
    TreeEntry { bit_pattern: 172, bit_count: 8 },
    TreeEntry { bit_pattern: 173, bit_count: 8 },
    TreeEntry { bit_pattern: 174, bit_count: 8 },
    TreeEntry { bit_pattern: 175, bit_count: 8 },
    TreeEntry { bit_pattern: 176, bit_count: 8 },
    TreeEntry { bit_pattern: 177, bit_count: 8 },
    TreeEntry { bit_pattern: 178, bit_count: 8 },
    TreeEntry { bit_pattern: 179, bit_count: 8 },
    TreeEntry { bit_pattern: 180, bit_count: 8 },
    TreeEntry { bit_pattern: 181, bit_count: 8 },
    TreeEntry { bit_pattern: 182, bit_count: 8 },
    TreeEntry { bit_pattern: 183, bit_count: 8 },
    TreeEntry { bit_pattern: 184, bit_count: 8 },
    TreeEntry { bit_pattern: 185, bit_count: 8 },
    TreeEntry { bit_pattern: 186, bit_count: 8 },
    TreeEntry { bit_pattern: 187, bit_count: 8 },
    TreeEntry { bit_pattern: 188, bit_count: 8 },
    TreeEntry { bit_pattern: 189, bit_count: 8 },
    TreeEntry { bit_pattern: 190, bit_count: 8 },
    TreeEntry { bit_pattern: 191, bit_count: 8 },
    TreeEntry { bit_pattern: 400, bit_count: 9 },
    TreeEntry { bit_pattern: 401, bit_count: 9 },
    TreeEntry { bit_pattern: 402, bit_count: 9 },
    TreeEntry { bit_pattern: 403, bit_count: 9 },
    TreeEntry { bit_pattern: 404, bit_count: 9 },
    TreeEntry { bit_pattern: 405, bit_count: 9 },
    TreeEntry { bit_pattern: 406, bit_count: 9 },
    TreeEntry { bit_pattern: 407, bit_count: 9 },
    TreeEntry { bit_pattern: 408, bit_count: 9 },
    TreeEntry { bit_pattern: 409, bit_count: 9 },
    TreeEntry { bit_pattern: 410, bit_count: 9 },
    TreeEntry { bit_pattern: 411, bit_count: 9 },
    TreeEntry { bit_pattern: 412, bit_count: 9 },
    TreeEntry { bit_pattern: 413, bit_count: 9 },
    TreeEntry { bit_pattern: 414, bit_count: 9 },
    TreeEntry { bit_pattern: 415, bit_count: 9 },
    TreeEntry { bit_pattern: 416, bit_count: 9 },
    TreeEntry { bit_pattern: 417, bit_count: 9 },
    TreeEntry { bit_pattern: 418, bit_count: 9 },
    TreeEntry { bit_pattern: 419, bit_count: 9 },
    TreeEntry { bit_pattern: 420, bit_count: 9 },
    TreeEntry { bit_pattern: 421, bit_count: 9 },
    TreeEntry { bit_pattern: 422, bit_count: 9 },
    TreeEntry { bit_pattern: 423, bit_count: 9 },
    TreeEntry { bit_pattern: 424, bit_count: 9 },
    TreeEntry { bit_pattern: 425, bit_count: 9 },
    TreeEntry { bit_pattern: 426, bit_count: 9 },
    TreeEntry { bit_pattern: 427, bit_count: 9 },
    TreeEntry { bit_pattern: 428, bit_count: 9 },
    TreeEntry { bit_pattern: 429, bit_count: 9 },
    TreeEntry { bit_pattern: 430, bit_count: 9 },
    TreeEntry { bit_pattern: 431, bit_count: 9 },
    TreeEntry { bit_pattern: 432, bit_count: 9 },
    TreeEntry { bit_pattern: 433, bit_count: 9 },
    TreeEntry { bit_pattern: 434, bit_count: 9 },
    TreeEntry { bit_pattern: 435, bit_count: 9 },
    TreeEntry { bit_pattern: 436, bit_count: 9 },
    TreeEntry { bit_pattern: 437, bit_count: 9 },
    TreeEntry { bit_pattern: 438, bit_count: 9 },
    TreeEntry { bit_pattern: 439, bit_count: 9 },
    TreeEntry { bit_pattern: 440, bit_count: 9 },
    TreeEntry { bit_pattern: 441, bit_count: 9 },
    TreeEntry { bit_pattern: 442, bit_count: 9 },
    TreeEntry { bit_pattern: 443, bit_count: 9 },
    TreeEntry { bit_pattern: 444, bit_count: 9 },
    TreeEntry { bit_pattern: 445, bit_count: 9 },
    TreeEntry { bit_pattern: 446, bit_count: 9 },
    TreeEntry { bit_pattern: 447, bit_count: 9 },
    TreeEntry { bit_pattern: 448, bit_count: 9 },
    TreeEntry { bit_pattern: 449, bit_count: 9 },
    TreeEntry { bit_pattern: 450, bit_count: 9 },
    TreeEntry { bit_pattern: 451, bit_count: 9 },
    TreeEntry { bit_pattern: 452, bit_count: 9 },
    TreeEntry { bit_pattern: 453, bit_count: 9 },
    TreeEntry { bit_pattern: 454, bit_count: 9 },
    TreeEntry { bit_pattern: 455, bit_count: 9 },
    TreeEntry { bit_pattern: 456, bit_count: 9 },
    TreeEntry { bit_pattern: 457, bit_count: 9 },
    TreeEntry { bit_pattern: 458, bit_count: 9 },
    TreeEntry { bit_pattern: 459, bit_count: 9 },
    TreeEntry { bit_pattern: 460, bit_count: 9 },
    TreeEntry { bit_pattern: 461, bit_count: 9 },
    TreeEntry { bit_pattern: 462, bit_count: 9 },
    TreeEntry { bit_pattern: 463, bit_count: 9 },
    TreeEntry { bit_pattern: 464, bit_count: 9 },
    TreeEntry { bit_pattern: 465, bit_count: 9 },
    TreeEntry { bit_pattern: 466, bit_count: 9 },
    TreeEntry { bit_pattern: 467, bit_count: 9 },
    TreeEntry { bit_pattern: 468, bit_count: 9 },
    TreeEntry { bit_pattern: 469, bit_count: 9 },
    TreeEntry { bit_pattern: 470, bit_count: 9 },
    TreeEntry { bit_pattern: 471, bit_count: 9 },
    TreeEntry { bit_pattern: 472, bit_count: 9 },
    TreeEntry { bit_pattern: 473, bit_count: 9 },
    TreeEntry { bit_pattern: 474, bit_count: 9 },
    TreeEntry { bit_pattern: 475, bit_count: 9 },
    TreeEntry { bit_pattern: 476, bit_count: 9 },
    TreeEntry { bit_pattern: 477, bit_count: 9 },
    TreeEntry { bit_pattern: 478, bit_count: 9 },
    TreeEntry { bit_pattern: 479, bit_count: 9 },
    TreeEntry { bit_pattern: 480, bit_count: 9 },
    TreeEntry { bit_pattern: 481, bit_count: 9 },
    TreeEntry { bit_pattern: 482, bit_count: 9 },
    TreeEntry { bit_pattern: 483, bit_count: 9 },
    TreeEntry { bit_pattern: 484, bit_count: 9 },
    TreeEntry { bit_pattern: 485, bit_count: 9 },
    TreeEntry { bit_pattern: 486, bit_count: 9 },
    TreeEntry { bit_pattern: 487, bit_count: 9 },
    TreeEntry { bit_pattern: 488, bit_count: 9 },
    TreeEntry { bit_pattern: 489, bit_count: 9 },
    TreeEntry { bit_pattern: 490, bit_count: 9 },
    TreeEntry { bit_pattern: 491, bit_count: 9 },
    TreeEntry { bit_pattern: 492, bit_count: 9 },
    TreeEntry { bit_pattern: 493, bit_count: 9 },
    TreeEntry { bit_pattern: 494, bit_count: 9 },
    TreeEntry { bit_pattern: 495, bit_count: 9 },
    TreeEntry { bit_pattern: 496, bit_count: 9 },
    TreeEntry { bit_pattern: 497, bit_count: 9 },
    TreeEntry { bit_pattern: 498, bit_count: 9 },
    TreeEntry { bit_pattern: 499, bit_count: 9 },
    TreeEntry { bit_pattern: 500, bit_count: 9 },
    TreeEntry { bit_pattern: 501, bit_count: 9 },
    TreeEntry { bit_pattern: 502, bit_count: 9 },
    TreeEntry { bit_pattern: 503, bit_count: 9 },
    TreeEntry { bit_pattern: 504, bit_count: 9 },
    TreeEntry { bit_pattern: 505, bit_count: 9 },
    TreeEntry { bit_pattern: 506, bit_count: 9 },
    TreeEntry { bit_pattern: 507, bit_count: 9 },
    TreeEntry { bit_pattern: 508, bit_count: 9 },
    TreeEntry { bit_pattern: 509, bit_count: 9 },
    TreeEntry { bit_pattern: 510, bit_count: 9 },
    TreeEntry { bit_pattern: 511, bit_count: 9 },
    TreeEntry { bit_pattern: 0, bit_count: 7 },
    TreeEntry { bit_pattern: 1, bit_count: 7 },
    TreeEntry { bit_pattern: 2, bit_count: 7 },
    TreeEntry { bit_pattern: 3, bit_count: 7 },
    TreeEntry { bit_pattern: 4, bit_count: 7 },
    TreeEntry { bit_pattern: 5, bit_count: 7 },
    TreeEntry { bit_pattern: 6, bit_count: 7 },
    TreeEntry { bit_pattern: 7, bit_count: 7 },
    TreeEntry { bit_pattern: 8, bit_count: 7 },
    TreeEntry { bit_pattern: 9, bit_count: 7 },
    TreeEntry { bit_pattern: 10, bit_count: 7 },
    TreeEntry { bit_pattern: 11, bit_count: 7 },
    TreeEntry { bit_pattern: 12, bit_count: 7 },
    TreeEntry { bit_pattern: 13, bit_count: 7 },
    TreeEntry { bit_pattern: 14, bit_count: 7 },
    TreeEntry { bit_pattern: 15, bit_count: 7 },
    TreeEntry { bit_pattern: 16, bit_count: 7 },
    TreeEntry { bit_pattern: 17, bit_count: 7 },
    TreeEntry { bit_pattern: 18, bit_count: 7 },
    TreeEntry { bit_pattern: 19, bit_count: 7 },
    TreeEntry { bit_pattern: 20, bit_count: 7 },
    TreeEntry { bit_pattern: 21, bit_count: 7 },
    TreeEntry { bit_pattern: 22, bit_count: 7 },
    TreeEntry { bit_pattern: 23, bit_count: 7 },
    TreeEntry { bit_pattern: 192, bit_count: 8 },
    TreeEntry { bit_pattern: 193, bit_count: 8 },
    TreeEntry { bit_pattern: 194, bit_count: 8 },
    TreeEntry { bit_pattern: 195, bit_count: 8 },
    TreeEntry { bit_pattern: 196, bit_count: 8 },
    TreeEntry { bit_pattern: 197, bit_count: 8 },
  ],
  min_bit_count: 7,
  max_bit_count: 9,
};

#[test]
#[allow(clippy::needless_range_loop)]
fn test_print_fixed_huffman() {
  let mut tree = [TreeEntry::default(); 288];
  for value in 0..=287 {
    match value {
      0..=143 => tree[value].bit_count = 8,
      144..=255 => tree[value].bit_count = 9,
      256..=279 => tree[value].bit_count = 7,
      280..=287 => tree[value].bit_count = 8,
      _ => panic!(),
    }
  }
  TreeEntry::fill_in_the_codes(&mut tree).unwrap();
  trace!("{:#?}", &tree[..]);
  //panic!();
}
